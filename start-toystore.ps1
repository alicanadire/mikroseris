# ToyStore Quick Start Script for PowerShell
# Bu script her ≈üeyi otomatik olarak ba≈ülatƒ±r

param(
    [switch]$IncludeFrontend = $false,
    [switch]$ShowLogs = $false
)

Write-Host ""
Write-Host "üéÆ ToyStore Microservices Quick Start" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan

# Docker kontrol√º
try {
    $null = docker info 2>$null
    Write-Host "‚úì Docker is running" -ForegroundColor Green
}
catch {
    Write-Host "‚úó Docker is not running. Please start Docker Desktop first!" -ForegroundColor Red
    exit 1
}

# Docker Compose dosya kontrol√º
$dockerComposeFile = "backend\docker-compose-full.yml"
if (-not (Test-Path $dockerComposeFile)) {
    Write-Host "‚úó Docker Compose file not found: $dockerComposeFile" -ForegroundColor Red
    exit 1
}

Write-Host "‚úì Docker Compose file found" -ForegroundColor Green

# Backend servislerini ba≈ülat
Write-Host ""
Write-Host "üöÄ Starting all backend services..." -ForegroundColor Yellow

$originalLocation = Get-Location
Set-Location backend

try {
    # T√ºm servisleri ba≈ülat
    if ($IncludeFrontend) {
        Write-Host "Starting all services including frontend..." -ForegroundColor Yellow
        docker-compose -f docker-compose-full.yml up -d
        Write-Host "‚úì All services (including frontend) started" -ForegroundColor Green
    } 
    else {
        Write-Host "Starting backend services only..." -ForegroundColor Yellow
        # Sadece backend servisleri (frontend hari√ß)
        docker-compose -f docker-compose-full.yml up -d --scale frontend=0
        Write-Host "‚úì Backend services started" -ForegroundColor Green
    }
    
    Write-Host ""
    Write-Host "‚è≥ Waiting for services to be ready (this may take a few minutes)..." -ForegroundColor Yellow
    Start-Sleep -Seconds 45
    
    # Servis durumunu kontrol et
    Write-Host ""
    Write-Host "üìä Service Status:" -ForegroundColor Cyan
    docker-compose -f docker-compose-full.yml ps
    
    Write-Host ""
    Write-Host "üéâ ToyStore is ready!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üì± Access Points:" -ForegroundColor Yellow
    Write-Host "  ‚Ä¢ API Gateway:        http://localhost:5000" -ForegroundColor White
    Write-Host "  ‚Ä¢ Swagger UI:         http://localhost:5001/swagger" -ForegroundColor White
    Write-Host "  ‚Ä¢ RabbitMQ Admin:     http://localhost:15672 (admin/ToyStore123!)" -ForegroundColor White
    Write-Host "  ‚Ä¢ Database Admin:     http://localhost:8080" -ForegroundColor White
    Write-Host "  ‚Ä¢ Redis Admin:        http://localhost:8081" -ForegroundColor White
    
    if ($IncludeFrontend) {
        Write-Host "  ‚Ä¢ Frontend:           http://localhost:3000" -ForegroundColor White
    } 
    else {
        Write-Host ""
        Write-Host "üí° To start frontend separately:" -ForegroundColor Cyan
        Write-Host "   cd .." -ForegroundColor Gray
        Write-Host "   npm install && npm run dev" -ForegroundColor Gray
    }
    
    Write-Host ""
    Write-Host "üîß Management Commands:" -ForegroundColor Yellow
    Write-Host "  ‚Ä¢ View logs:          docker-compose -f docker-compose-full.yml logs -f" -ForegroundColor Gray
    Write-Host "  ‚Ä¢ Stop services:      docker-compose -f docker-compose-full.yml down" -ForegroundColor Gray
    Write-Host "  ‚Ä¢ Restart services:   docker-compose -f docker-compose-full.yml restart" -ForegroundColor Gray
    
    # Loglarƒ± g√∂ster
    if ($ShowLogs) {
        Write-Host ""
        Write-Host "üìù Showing logs (Ctrl+C to exit)..." -ForegroundColor Yellow
        docker-compose -f docker-compose-full.yml logs -f
    }
}
catch {
    Write-Host "‚úó Error starting services: $_" -ForegroundColor Red
    exit 1
}
finally {
    Set-Location $originalLocation
}
