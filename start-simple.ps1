# ToyStore Simple Starter - PowerShell
# Basit ve g√ºvenli ba≈ülatma scripti

param(
    [switch]$Frontend
)

Write-Host "üéÆ ToyStore Microservices Starter" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan
Write-Host ""

# Docker kontrol√º
Write-Host "Checking Docker..." -ForegroundColor Yellow
$dockerRunning = $false
try {
    $dockerInfo = docker info 2>$null
    if ($LASTEXITCODE -eq 0) {
        $dockerRunning = $true
        Write-Host "‚úì Docker is running" -ForegroundColor Green
    }
}
catch {
    Write-Host "‚úó Docker check failed" -ForegroundColor Red
}

if (-not $dockerRunning) {
    Write-Host "‚úó Docker is not running. Please start Docker Desktop first!" -ForegroundColor Red
    Write-Host ""
    Write-Host "Steps to fix:" -ForegroundColor Yellow
    Write-Host "1. Open Docker Desktop" -ForegroundColor White
    Write-Host "2. Wait for it to say 'Engine running'" -ForegroundColor White
    Write-Host "3. Run this script again" -ForegroundColor White
    exit 1
}

# Docker Compose dosya kontrol√º
Write-Host "Checking files..." -ForegroundColor Yellow
if (-not (Test-Path "backend")) {
    Write-Host "‚úó Backend folder not found!" -ForegroundColor Red
    exit 1
}

if (-not (Test-Path "backend\docker-compose-full.yml")) {
    Write-Host "‚úó Docker Compose file not found!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úì All files found" -ForegroundColor Green
Write-Host ""

# Ana klas√∂r√º kaydet
$startLocation = Get-Location

# Backend klas√∂r√ºne ge√ß
Set-Location backend

Write-Host "üöÄ Starting ToyStore services..." -ForegroundColor Yellow
Write-Host ""

if ($Frontend) {
    Write-Host "Starting ALL services (including frontend)..." -ForegroundColor Cyan
    docker-compose -f docker-compose-full.yml up -d
}
else {
    Write-Host "Starting BACKEND services only..." -ForegroundColor Cyan
    docker-compose -f docker-compose-full.yml up -d sqlserver postgresql mongodb redis rabbitmq identityservice productservice orderservice userservice inventoryservice notificationservice apigateway adminer redis-commander
}

if ($LASTEXITCODE -eq 0) {
    Write-Host ""
    Write-Host "‚è≥ Waiting for services to initialize..." -ForegroundColor Yellow
    Start-Sleep -Seconds 30
    
    Write-Host ""
    Write-Host "üìä Checking service status:" -ForegroundColor Cyan
    docker-compose -f docker-compose-full.yml ps
    
    Write-Host ""
    Write-Host "üéâ ToyStore is starting up!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üì± Available services:" -ForegroundColor Yellow
    Write-Host "  üåê API Gateway:       http://localhost:5000" -ForegroundColor White
    Write-Host "  üìù Swagger Docs:      http://localhost:5001/swagger" -ForegroundColor White
    Write-Host "  üê∞ RabbitMQ:          http://localhost:15672" -ForegroundColor White
    Write-Host "  üóÑÔ∏è  Database Admin:    http://localhost:8080" -ForegroundColor White
    Write-Host "  ‚ö° Redis Admin:       http://localhost:8081" -ForegroundColor White
    
    if ($Frontend) {
        Write-Host "  üé® Frontend:          http://localhost:3000" -ForegroundColor White
    }
    else {
        Write-Host ""
        Write-Host "üí° To start frontend:" -ForegroundColor Cyan
        Write-Host "   npm install && npm run dev" -ForegroundColor Gray
    }
    
    Write-Host ""
    Write-Host "üîë Login credentials:" -ForegroundColor Yellow
    Write-Host "  Admin:     admin@toystore.com / Admin123!" -ForegroundColor White
    Write-Host "  Customer:  customer@toystore.com / Customer123!" -ForegroundColor White
    Write-Host "  RabbitMQ:  admin / ToyStore123!" -ForegroundColor White
    
    Write-Host ""
    Write-Host "üîß Useful commands:" -ForegroundColor Yellow
    Write-Host "  View logs:    docker-compose -f docker-compose-full.yml logs -f" -ForegroundColor Gray
    Write-Host "  Stop all:     docker-compose -f docker-compose-full.yml down" -ForegroundColor Gray
    Write-Host "  Restart:      docker-compose -f docker-compose-full.yml restart" -ForegroundColor Gray
}
else {
    Write-Host ""
    Write-Host "‚ùå Failed to start services!" -ForegroundColor Red
    Write-Host "Check the error messages above." -ForegroundColor Yellow
}

# Orijinal klas√∂re d√∂n
Set-Location $startLocation

Write-Host ""
Write-Host "Press any key to exit..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
